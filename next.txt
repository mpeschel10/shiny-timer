
Next:
tests
unit tests. Who needs jest? Just bake it in and note to remove it.
    Usually, things being not defined. Load a file, save a file, discard a file.
    sanity checks
    change sound while sound is playing; expect new sound to be playing and old sound to be off and no other sounds to be playing.
    ALL comboSounds.options should load
    All comboSounds.options should have defined sounds.x member
    "time should go here" should disappear fast.
    selection should be constant during tick down
    something about state? cycle through all possible states; expect certain displays and certain transitions.
    
Manual tests:
    Start new window with no database. Expect "Upgrade needed", "Creating store"


retrim audio elements--most of these loops should be WAY shorter.
firefox accessibility helper
Make sure that there are no fatal errors with loading the database; if something goes wrong, the default sounds etc. should still work.
    descriptive error for adding sound file failing e.g. if the file cannot be decoded (Safari)--Audio().addEventListener("fail", (()=>{alert("Failure")}));
    handle when quota is exceeded
make variable names more consistent
    rename "wait-for-entry" something descriptive
    update names e.g. onReset -> onButtonReset and the keypress/keydown and so on
    change all ' to "
    clean up logging
make the page pretty
    Make error messages nice (not just alerts)
    field-dummy-border unstable; replace with normal border (span?)
    colors?
    center, larger text
    get T's feedback
    move current time to bottom, smaller text
    ribbon?
    instead of zero-padded two digits display, just one digit?
    Put the sound managment stuff in a dialogue or box or something
warn user on making a url for state=ringing that autoplay may be forbidden
CentOS best practices email
    Forbid .. "directory traversal attack"
    non-reused password


Later:
add mp3s for safari
misc. accessibility?
    aria roles - label button-start-pause as switch functionality.
option to clear indexedDB all at once
tests
    all state transitions:
        wait_for_entry -> running
        running -> wait_for_entry
        running -> paused
        running -> ringing
        etc.
    add a sound
    remove a sound
    automated unit testing
Test cross platform
    looks bad on older firefox I guess?
    apple?
    android!!!
    chromium, chrome
    do browsers honor preload requirements?

Maybe:
convert to typescript
Persist discarded default sounds.
    Add button to reset discarded default sounds
preserve order across page loads
option to reorder/rename the sounds
show less sounds initially? A little overwhelming.
handle when people add songs in multiple tabs (should propogate, or at least raise appropriate alert/error)
handle having indexedDB open in multiple tabs with version update
lazy loading for audio files in indexeddb
Multiple timers
    Button add a timer
    Button delete a timer
Long term alarms
Save alarms for next time (local storage or whatevs)
Animations
"Rebuild" static pages via python script or something
    Flask templating?
    Names of sounds, for example.
Tick speed is slightly imprecise. Occasionally, clock will appear to double a tick or skip a tick. Consider fixing that (heavy machinery):
    Optimal solution is probably to tick once per second, centered on the half second mark, with a negative feedback loop to fps-style adjust sleep time to remain there.
    Almost certainly not worth the effort.
Proper solution for detecting when the user is trying to change the inputs for the anything->wait_for_input state change.
    Specifically, we now listen specifically for digit keypresses and delete or backspace keydowns.
    But you can change the timer other ways! E.g. pasting. So it would be best to listen for true changes. For every keydown, record the state of the entry. Then when keyup, if entry.value is different, we know the user is inputing something somehow, and we should pause.
test debian copyright notice (get linter?)


