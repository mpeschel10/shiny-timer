
Next:
make the page pretty
    field-dummy-border unstable; replace with normal border (span?)
    move current time to bottom, smaller text
    ribbon along bottom: current time, copyright, github link
    ribbon along top: home > webtimer
    center, larger text
    Make error messages nice (not just alerts)
    Put the sound managment stuff in a dialogue or box or something
    colors?
    get T's feedback
    ribbon?
    instead of zero-padded two digits display, just one digit?
const instead of let
warn user on making a url for state=ringing that autoplay may be forbidden
CentOS best practices email
    Forbid .. "directory traversal attack"
    non-reused password
Run tests:
    With debug flag
    Start new window with no database. Expect "Upgrade needed", "Creating store"
compress that horrible long WET state test
duplicate sounds names are apparently permitted somehow? E.g. add "Alarm (digital)". weird.


Later:
don't be a purist. Just use mp3s. I'm sorry, ogg...
misc. accessibility?
    aria roles - label button-start-pause as switch functionality.
option to clear indexedDB all at once
tests
    all state transitions:
        wait_for_entry -> running
        running -> wait_for_entry
        running -> paused
        running -> ringing
        etc.
    add a sound
    remove a sound
    automated unit testing
Test cross platform
    fail gracefully on Safari wrt indexeddb
    looks bad on older firefox I guess?
    apple?
    android!!!
    chromium, chrome
    do browsers honor preload requirements?

Maybe:
for testState() e2e test, consider checking that timeLeft decreases monotonically through button clicks and does not get "reset" at any point.
convert to typescript
Persist discarded default sounds.
    Add button to reset discarded default sounds
preserve order across page loads
option to reorder/rename the sounds
show less sounds initially? A little overwhelming.
handle when people add songs in multiple tabs (should propogate, or at least raise appropriate alert/error)
handle having indexedDB open in multiple tabs with version update
lazy loading for audio files in indexeddb
Multiple timers
    Button add a timer
    Button delete a timer
Long term alarms
Save alarms for next time (local storage or whatevs)
Animations
"Rebuild" static pages via python script or something
    Flask templating?
    Names of sounds, for example.
Tick speed is slightly imprecise. Occasionally, clock will appear to double a tick or skip a tick. Consider fixing that (heavy machinery):
    Optimal solution is probably to tick once per second, centered on the half second mark, with a negative feedback loop to fps-style adjust sleep time to remain there.
    Almost certainly not worth the effort.
Proper solution for detecting when the user is trying to change the inputs for the anything->wait_for_input state change.
    Specifically, we now listen specifically for digit keypresses and delete or backspace keydowns.
    But you can change the timer other ways! E.g. pasting. So it would be best to listen for true changes. For every keydown, record the state of the entry. Then when keyup, if entry.value is different, we know the user is inputing something somehow, and we should pause.
test debian copyright notice (get linter?)
handle when quota is exceeded
    can't trigger the error; ignore for now
why am I mucking around with firing events e.g. comboSounds.selectedIndex = 12; comboSounds.disaptchEvent("change");. Waste of code. Just call onComboSoundsChange directly.
rename "wait-for-entry" something descriptive

